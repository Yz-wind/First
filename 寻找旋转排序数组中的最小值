int findMin(int* nums, int numsSize)
{
	if (numsSize == 1)
	{
		return nums[0];
	}
	int left = 0, right = numsSize - 1;
	if (nums[right] > nums[0])
	{
		return nums[0];
	}
	while (right >= left)
	{
		int mid = left + (right - left) / 2;
		if (nums[mid] > nums[mid + 1])
		{
			return nums[mid + 1];
		}
		if (nums[mid - 1] > nums[mid])
		{
			return nums[mid];
		}
		if (nums[mid] > nums[0])
		{
			left = mid + 1;
		}
		else
		{
			right = mid - 1;
		}
	}
	return -1; 
}

//方法采用二分搜索法
//找到数组的中间元素 mid，若mid>数组一个元素，则在mid右边搜素，反之则在左边搜索。
//满足nums[mid]>nums[mid+1]或nums[mid-1]>nums[mid]都满足条件

