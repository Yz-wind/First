#include <iostream>
using namespace std;
#include <string>
#define MAX 1000 //最大人数

//菜单界面
void showMenu()
{
    cout << "1、添加联系人" << endl;
    cout << "2、显示联系人" << endl;
    cout << "3、删除联系人" << endl;
    cout << "4、查找联系人" << endl;
    cout << "5、修改联系人" << endl;
    cout << "6、清空联系人" << endl;
    cout << "0、退出通讯录" << endl;

}


//设计联系人的结构体
struct Person
{
    string m_Name;//姓名
    int m_Sex;//性别
    int m_Age;//年龄
    string m_Phone;//电话
    string m_Addr;//住址
};

//设计通讯录结构体
struct Addressbooks
{
    //通讯录中保存的联系人数组
    struct Person personArray[MAX];
    //通讯录中当前记录联系人个数
    int m_size;
};

//1、添加联系人
void addPerson(Addressbooks* abs)
{
    //判断通讯录是否已满，如果满了就不在添加
    if (abs->m_size == MAX)
    {
        cout << " 通讯录已满，已无法添加！" << endl;
        return;
    }
    else
    {
        //添加具体联系人
        string name;
        cout << "请输入姓名" << endl;
        cin >> name;
        abs->personArray[abs->m_size].m_Name = name;

        //性别
        cout << "请输入性别： " << endl;
        cout << "1-- 男" << endl;
        cout << "2-- 女" << endl;
        int sex = 0;

        while (true)
        {
            cin >> sex;
            if (sex == 1 || sex == 2)
            {
                abs->personArray[abs->m_size].m_Sex = sex;
                break;
            }
            cout << "输入有误，请重新输入" << endl;
        }
    }

    //年龄
    cout << "请输入年龄： " << endl;
    int age = 0;
    cin >> age;
    abs->personArray[abs->m_size].m_Age = age;

    //电话
    cout << "请输入电话： " << endl;
    string phone;
    cin >> phone;
    abs->personArray[abs->m_size].m_Phone = phone;

    //住址
    cout << "请输入家庭地址： " << endl;
    string address;
    cin >> address;
    abs->personArray[abs->m_size].m_Addr = address;

    //更新通讯录人数；
    abs->m_size++;

    cout << "添加成功！" << endl;

    system("pause");//请按任意键继续
    system("cls");//清屏操作
}

//2、显示所有联系人
void showPerson(Addressbooks* abs)
{
    //判断通讯录中的人数是否为0，如果为0，提示记录为空
    //如果不为0，显示记录联系人信息
    if (abs->m_size == 0)
    {
        cout << "当前记录为空" << endl;
    }
    else
    {
        for (int i = 0; i < abs->m_size; i++)
        {
            cout << "姓名： " << abs->personArray[i].m_Name << "\t";
            cout << "性别： " << (abs->personArray[i].m_Sex == 1 ?"男":"女")<< "\t";
            cout << "年龄： " << abs->personArray[i].m_Age << "\t";
            cout << "电话： " << abs->personArray[i].m_Phone << "\t";
            cout << "住址： " << abs->personArray[i].m_Addr << endl;
        }
    }
    system("pause");//按任意键继续
    system("cls");//清屏
}

//检测联系人是否存在，如果存在，返回联系人所在数组中的具体位置，不存在返回-1
int isExist(Addressbooks* abs, string name)
{
    for (int i = 0; i < abs->m_size; i++)
    {
        //找到用户输入的姓名了
        if (abs->personArray[i].m_Name == name)
        {
            return i;//找到了，返回这个人在数组中的下标编号
        }
    }
    return -1;//遍历结束都没有找到，返回-1；
}

//3、删除指定联系人
void delttePerson(Addressbooks* abs)
{
    cout << "请输入您要删除的联系人" << endl;

    string name;
    cin >> name;

    //ret == -1 未查到
    //ret !=-1查到了
    int ret = isExist(abs, name);

    if (ret != -1)
    {
        //找到此人，进行删除操作
        for (int i = ret; i < abs->m_size; i++)
        {
            //数据前移
            abs->personArray[i] = abs->personArray[i + 1];
        }
        abs->m_size--;
        cout << "删除成功！" << endl;
    }
    system("pause");
    system("cls");
}

//4、查找指定联系人信息
void findPerson(Addressbooks* abs)
{
    cout << "请输入您要查找的联系人" << endl;
    string name;
    cin >> name;

    //判断指定的联系人是否存在通讯录中
    int ret = isExist(abs, name);

    if (ret != -1)//找到联系人
    {
        cout << "姓名： " << abs->personArray[ret].m_Name << "\t";
        cout << "性别： " << abs->personArray[ret].m_Sex << "\t";
        cout << "年龄： " << abs->personArray[ret].m_Age << "\t";
        cout << "电话： " << abs->personArray[ret].m_Phone << "\t";
        cout << "住址： " << abs->personArray[ret].m_Addr << endl;;
    }
    else  //未找到联系人
    {
        cout << "查无此人" << endl;
    }
    
    //任意键按下后，清屏
    system("pause");
    system("cls");
    
}

//5、修改指定联系人信息
void modifyPerson(Addressbooks* abs)
{
    cout << "请输入您要修改的联系人" << endl;
    string name;
    cin >> name;
    
    int ret = isExist(abs, name);

    if (ret != -1)//找到指定联系人
    {
        //姓名
        string name;
        cout << "请输入姓名： " << endl;
        cin >> name;
        abs->personArray[ret].m_Name = name;

        //性别
        cout << "请输入性别： " << endl;
        cout << "1--男" << endl;
        cout << "2--女" << endl;

        int sex = 0;
        while (true)
        {
            cin >> sex;
            if (sex == 1 || sex == 2)
            {
                //输入正确，退出循环输入
                abs->personArray[ret].m_Sex = sex;
                break;
            }
            cout << "输入有误，请重新输入" << endl;
        }

        //年龄
        cout << "请输入年龄： " << endl;
        int age = 0;
        cin >> age;
        abs->personArray[ret].m_Age = age;

        //电话
        cout << "请输入联系电话： " << endl;
        string phone;
        cin >> phone;
        abs->personArray[ret].m_Phone = phone;

        //住址
        cout << "请输入家庭住址： " << endl;
        string address;
        cin >> address;
        abs->personArray[ret].m_Addr = address;

        cout << "修改成功！" << endl;
    }
    else  //未找到联系人
    {
        cout << "查无此人" << endl;
    }
    //按任意键后清屏
    system("pause");
    system("cls");
}

//6、清空联系人
void cleanPerson(Addressbooks* abs)
{
    abs->m_size = 0;//将当前记录联系人数量置为0，做逻辑上的清空
    cout << "通讯录已清空" << endl;

    //按任意键后清屏
    system("pause");
    system("cls");
}
int main()
{
    //创建通讯录结构体变量
    Addressbooks abs;
    //初始化通讯录中当前人员个数
    abs.m_size = 0;

    int select = 0;//创建用户选择输入的变量

    while (true)
    {
        showMenu();//菜单调用

        cin >> select;

        switch (select)
        {
        case 1://1、添加联系人
            addPerson(&abs);//利用地址传递修饰形参
            break;
        case 2://2、显示联系人
            showPerson(&abs);
            break;
        case 3://3、删除联系人
            delttePerson(&abs);
            break;
        case 4://4、查找联系人
            findPerson(&abs);
            break;
        case 5://5、修改联系人
            modifyPerson(&abs);
            break;
        case 6://6、清空联系人
            cleanPerson(&abs);
            break;
        case 0://0、退出通讯录
            cout << "欢迎下次使用" << endl;
            system("pause");
            return 0;
            break;
        default:
            break;
        }
    }
    return 0;
}
