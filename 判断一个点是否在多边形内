#include <iostream>
#include <stdio.h>

int inOrNot(int poly_sides, float* poly_X, float* poly_Y, float x, float y)
{
    //poly_sides 测试多边形的顶点数
    //poly_x     测试多边形的各个顶点的x坐标
    //poly_y     测试多边形的各个顶点的y坐标
    //x，y分别为测试点的x，y坐标
    int i, j;
    j = poly_sides - 1;
    int res = 0;
    for (i = 0; i < poly_sides; i++)
    {
        //对每一条边进行遍历，该边的两个端点，有一个必须在待测点（x，y）的左边，且两个点中有一个点的y左边比p.y小
        if ((poly_Y[i] < y && poly_Y[j] >= y || poly_Y[j] < y && poly_Y[i] >= y) && (poly_X[i] <= x || poly_X[j] <= x))
        {
            //用水平的直线与该边相交，求交点的坐标
            res ^= ((poly_X[i] + (y - poly_Y[i]) / (poly_Y[j] - poly_Y[i]) * (poly_X[j] - poly_X[i])) < x);

        }
        j = i;
    }
    return res;
}



int main()
{
    int poly_sides = 5;  //poly_sides 测试多边形的顶点数
    float poly_X[5] = { 1,1,3,4,3 };  //poly_X     测试多边形的各个顶点的x坐标
    float poly_Y[5] = { 1,2,3,2,1 };  //poly_Y     测试多边形的各个顶点的y坐标
    float x = 399;  //x，y分别为测试点的x，y坐标
    float y = 2;
    int ret;
    ret = inOrNot(poly_sides, poly_X, poly_Y, x, y);
    if (ret == 1)
    {
        printf("测试点 （%f,%f）在多边形的内部\n", x, y);
    }
    else
    {
        printf("测试点 （%f,%f）不在多边形的内部\n", x, y);
    }
    return 0;
}

//原理：将测试点的Y坐标与多边形的每一个点进行比较，会得到测试点所在的行与多边形的所有交点
//如果测试点的两边点的个数都是奇数个，则测试点在多边形的内部，反之则不在
